/* Plugin generated by AMXX-Studio */

#include < amxmodx >
#include < amxmisc >
#include < nvault >
#include < fakemeta >
#include < hamsandwich >

#include < CC_ColorChat >

#pragma semicolon 1

#define PLUGIN "Furien Time Rewards"
#define VERSION "0.3.2"

#define MAX_STEPS	6

enum
{
	SECONDS = 0,
	MINUTES,
	HOURS,
	
	MAX_TIMEINFO
}

new g_iHoursSteps[ MAX_STEPS ] =
{
	50,
	80,
	150,
	200,
	250,
	300
};

new const g_szTag[ ] = "[Furien Time Rewards]";
new const g_szClassName[ ] = "Askhanar'sMagicEntity";

new g_iMagicEntity;
new g_iVault;

new g_iUsersPlayedTime[ 33 ][ MAX_TIMEINFO ];
new g_szName[ 33 ][ 32 ];

public plugin_init( )
{
	register_plugin(PLUGIN, VERSION, "Askhanar" );
	
	register_clcmd( "say", "HookClCmdSay" );
	register_clcmd( "say_team", "HookClCmdSay" );
	
	register_clcmd( "ptr_ore", "ClCmdSayOre" );
	
	register_forward( FM_ClientUserInfoChanged, "Fwd_ClientUserInfoChanged" );
	
	g_iVault  =  nvault_open(  "PlayedTimeRewards"  );
		
	if(  g_iVault  ==  INVALID_HANDLE  )
	{
		set_fail_state(  "nValut returned invalid handle!"  );
	}
	
	
	new iEnt;
	CreateMagicEntity:
	
	iEnt = engfunc( EngFunc_CreateNamedEntity, engfunc( EngFunc_AllocString, "info_target" ) );
	if( !iEnt || !pev_valid( iEnt ) )
		goto CreateMagicEntity;
	
	set_pev( iEnt, pev_classname, g_szClassName );
	set_pev( iEnt, pev_nextthink, get_gametime(  ) + 0.3 );
	register_forward( FM_Think, "FM_MagicEntityThink" );
	
	g_iMagicEntity = iEnt;
}

public HookClCmdSay( id )
{
	static szSaid[ 192 ];
	read_args( szSaid, sizeof ( szSaid ) -1 );
	
	if( !szSaid[ 0 ] )
		return 0;
	
	new szCommand[ 15 ];
	remove_quotes( szSaid );
	
	if( equal( szSaid, "/ore", strlen( "/ore" ) ) )
	{
		replace( szSaid, sizeof ( szSaid ) -1, "/", "" );
		formatex( szCommand, sizeof ( szCommand ) -1, "ptr_%s", szSaid );
		client_cmd( id, szCommand );
	}
	
	return 0;
}
public ClCmdSayOre( id )
{
	new szFirstArg[ 32 ];
	read_argv( 1, szFirstArg, sizeof ( szFirstArg ) -1 );
	
	if( equal( szFirstArg, "" )  )
	{
		
		ShowUsersPT( id, id );
		return 1;	
	}

	new iPlayer = cmd_target( id, szFirstArg, 8 );
	
	if( !iPlayer || !is_user_connected( iPlayer ) )
	{
		ColorChat( id, RED,"^x04%s^x01 Jucatorul^x03 %s^x01 nu a fost gasit!", g_szTag, szFirstArg );
		return 1;
	}
	
	ShowUsersPT( id, iPlayer );
	
	return 0;
	
}

public ShowUsersPT( id, iPlayer )
{
	new szMessage[ 128 ];
	new bool:bUseFormat = false;
	
	if( g_iUsersPlayedTime[ iPlayer ][ SECONDS ] )
	{
		formatex( szMessage, sizeof ( szMessage ) -1, "^x03%i^x01 secund%s", g_iUsersPlayedTime[ iPlayer ][ SECONDS ], g_iUsersPlayedTime[ iPlayer ][ SECONDS ] == 1 ? "a" : "e" );
			
		bUseFormat = true;
	}
	if( g_iUsersPlayedTime[ iPlayer ][ MINUTES ] )
	{
		if( bUseFormat )
		{
			format( szMessage, sizeof ( szMessage ) -1, "%s,^x03 %i^x01 minut%s", szMessage,
				g_iUsersPlayedTime[ iPlayer ][ MINUTES ], g_iUsersPlayedTime[ iPlayer ][ MINUTES ] == 1 ? "" : "e" );
		}
		else
		{
			formatex( szMessage, sizeof ( szMessage ) -1, "^x03%i^x01 minut%s",
				g_iUsersPlayedTime[ iPlayer ][ MINUTES ], g_iUsersPlayedTime[ iPlayer ][ MINUTES ] == 1 ? "" : "e" );
		
			bUseFormat = true;
		}
	}
	if( g_iUsersPlayedTime[ iPlayer ][ HOURS ] )
	{
		if( bUseFormat )
		{
			format( szMessage, sizeof ( szMessage ) -1, "%s,^x03 %i^x01 or%s", szMessage,
				g_iUsersPlayedTime[ iPlayer ][ HOURS ], g_iUsersPlayedTime[ iPlayer ][ HOURS ] == 1 ? "a" : "e" );
		}
		else
		{
			formatex( szMessage, sizeof ( szMessage ) -1, "^x03%i^x01 or%s",
				g_iUsersPlayedTime[ iPlayer ][ HOURS ], g_iUsersPlayedTime[ iPlayer ][ HOURS ] == 1 ? "a" : "e" );
		
			bUseFormat = true;
		}
	}
	
	if( bUseFormat )
	{
		ColorChat( id, RED, "^x04%s^x01Jucatorul^x03 %s^x01 a acumulat pana acum:", g_szTag, g_szName[ iPlayer ] );
		ColorChat( id, RED, "^x04%s^x01 %s^x01 .", g_szTag, szMessage );
	}
	else
	{
		ColorChat( id, RED, "^x04%s^x01Jucatorul^x03 %s^x01 a acumulat pana acum:", g_szTag, g_szName[ iPlayer ] );
		ColorChat( id, RED, "^x04%s^x03 0^x01 ore^x03 0^x01 minute^x03 0^x01 secunde .", g_szTag );
	}
}

public client_putinserver( id )
{
	if( is_user_bot( id ) )
		return 0;
		
	get_user_name( id, g_szName[ id ], sizeof ( g_szName[] ) -1 );
	LoadUsersData( id );
	
	return 0;
}

public client_disconnect( id )
{
	if( is_user_bot( id ) )
		return 0;
		
	SaveUsersData( id );
	
	return 0;
}

public Fwd_ClientUserInfoChanged( id, szBuffer )
{
	if ( !is_user_connected( id ) ) 
		return FMRES_IGNORED;
	
	static szNewName[ 32 ];
	
	engfunc( EngFunc_InfoKeyValue, szBuffer, "name", szNewName, sizeof ( szNewName ) -1 );
	
	if ( equal( szNewName, g_szName[ id ] ) )
		return FMRES_IGNORED;
	
	copy( g_szName[ id ], sizeof ( g_szName[] ) -1, szNewName );
	LoadUsersData( id );
	
	return FMRES_IGNORED;
}

public FM_MagicEntityThink( iEnt )
{
	
	if( iEnt != g_iMagicEntity || !pev_valid( iEnt ) )
		return;
		
	set_pev( iEnt, pev_nextthink, get_gametime(  ) + 1.0 );
	
	static szHour[ 5 ], iHour;
	
	get_time( "%H", szHour, sizeof ( szHour ) );
	iHour = str_to_num( szHour );
	
	if( iHour >= 1 && iHour < 7 )
	{
		static iPlayers[ 32 ];
		static iPlayersNum;
		
		get_players( iPlayers, iPlayersNum, "ch" );
		if( !iPlayersNum )
			return;
		
		static id, i;
		for( i = 0; i < iPlayersNum; i++ )
		{
			id = iPlayers[ i ];
			if( is_user_connected( id ) )
			{
				g_iUsersPlayedTime[ id ][ SECONDS ] += 1;
				
				if( g_iUsersPlayedTime[ id ][ SECONDS ] == 59 )
					SaveUsersData( id );
				
				ArrangeAndCheckTime( id );
			}
			
		}
	}
	
	// --| Stupid compiler..
	//return;

}

ArrangeAndCheckTime( id )
{
	
	while( g_iUsersPlayedTime[ id ][ SECONDS ] >= 60 )
	{
		g_iUsersPlayedTime[ id ][ SECONDS ] -= 60;
		g_iUsersPlayedTime[ id ][ MINUTES ] += 1;
	}
	
	while( g_iUsersPlayedTime[ id ][ MINUTES ] >= 60 )
	{
		g_iUsersPlayedTime[ id ][ MINUTES ] -= 60;
		g_iUsersPlayedTime[ id ][ HOURS ] += 1;
	}
	
	for( new i = 0; i < MAX_STEPS; i++ )
	{
		if( g_iUsersPlayedTime[ id ][ HOURS ] == g_iHoursSteps[ i ]
			&& g_iUsersPlayedTime[ id ][ MINUTES ] == 0
			&& g_iUsersPlayedTime[ id ][ SECONDS ] == 0 )
		{
			log_to_file( "PlayedTimeRewards.txt", "-------------------------------------------------------------------------------------" );
			log_to_file( "PlayedTimeRewards.txt", "Jucatorul | %s | a atins pragul de | %i ore | jucate in intervalul 01:00 - 07:00 noaptea!!!", g_szName[ id ], g_iHoursSteps[ i ] );
			log_to_file( "PlayedTimeRewards.txt", "-------------------------------------------------------------------------------------" );
			
			ColorChat( 0, RED, "^x04%s^x01 Felicitari jucatorului^x03 %s^x01 care tocmai a atins pragul:", g_szTag, g_szName[ id ] );
			ColorChat( 0, RED, "^x04%s^x03 %i ore^x01 jucate in intervalul^x03 01:00^x01 -^x03 07:00^x01 noaptea!!!", g_szTag, g_szName[ id ] );
		
		}
	}
	
}

public SaveUsersData( id )
{
	
	static szData[ 128 ];
	new iLen = formatex( szData, sizeof ( szData ) -1, "%i",g_iUsersPlayedTime[ id ][ SECONDS ] );
	iLen += formatex( szData[ iLen ], sizeof( szData ) - iLen -1 , " %i", g_iUsersPlayedTime[ id ][ MINUTES ] );
	iLen += formatex( szData[ iLen ], sizeof( szData ) - iLen -1 , " %i", g_iUsersPlayedTime[ id ][ HOURS ] );
	
	nvault_set( g_iVault, g_szName[ id ], szData );
}

public LoadUsersData( id )
{
	
	static szData[ 128 ], iTimeStamp;
	
	if( nvault_lookup( g_iVault, g_szName[ id ], szData, sizeof ( szData ) -1, iTimeStamp ) )
		ParseLoadedData( id, szData );
	else
		UserIsNew( id );
	
	
}

public ParseLoadedData( id, szData[ 128 ] )
{
	static szNothing[  15  ];
	
	for( new i = SECONDS; i < MAX_TIMEINFO; i++ )
	{
		strbreak( szData, szNothing, sizeof ( szNothing ) -1, szData, sizeof ( szData ) -1 );
		g_iUsersPlayedTime[ id ][ i ] = str_to_num( szNothing );
	}
	
}

public UserIsNew(  id  )
{
	
	for( new i = SECONDS; i < MAX_TIMEINFO; i++ )
		g_iUsersPlayedTime[ id ][ i ] = 0;
	
}

public plugin_end( )
{
	nvault_close( g_iVault );
}