/* Plugin generated by AMXX-Studio */

#include < amxmodx >
#include < fakemeta >
#include < hamsandwich >
#include < ColorChat >

#pragma semicolon 1


#define PLUGIN "WallBug Stats"
#define VERSION "0.1.0"

#define INFO_ZERO	0
#define INFO_TOPNUM	10
#define TASK_RESET	1993

new const g_szWBTopFile[ ] = "WallBugsTop.dat";
new const g_szCmdsFile[ ] = "wb_resetlist.ini";

//--| Banner link ( the image from top ).
new const g_szBanner[ ] = "http://www.amxmodx.org/images/amxxlarge.jpg";

new gCvarLeetWB;
new gCvarProWB;
new gCvarGoodWB;
new gCvarMinWB;
new gCvarMaxFPS;
new gCvarTagWB;

// --| FPS function directly token from kz_bugs_stats v0.62 by Newbie.
new Float:g_fGameTime[ 33 ];
new g_iFPS[ 33 ];
new g_iCurrentFPS[ 33 ];
new g_iFrames[ 33 ];
// --| FPS function.

new g_szName[ 33 ][ 32 ];
new g_szAuthId[ 33 ][ 35 ];

new g_szTopNames[ 33 ][ 32 ];
new g_szTopAuthIds[ 33 ][ 35 ];
new g_iTopDistances[ 33 ];

new Float:g_fFallStart[ 33 ][ 3 ];
new Float:g_fFallEnd[ 33 ][ 3 ];

new bool:g_bUserMadeWallBug[ 33 ];
new bool:g_bUserIsFalling[ 33 ];
new bool:g_bUserIsTouchingWall[ 33 ];

new bool:g_bUserHasWbStats[ 33 ];
new bool:g_bUserHasWbSounds[ 33 ];
new bool:g_bUserHasWbMessages[ 33 ];

new bool:g_bReset[ 33 ];

new SyncHudMessage;

public plugin_precache(  )
{
	precache_sound( "misc/mod_godlike.wav" );
	precache_sound( "misc/mod_wickedsick.wav" );
	precache_sound( "misc/perfect.wav" );
	precache_sound( "misc/impressive.wav" );
	
	
}

ReadAndRegisterResetlist( )
{
	new szFile[ 64 ];
	
	get_localinfo( "amxx_configsdir", szFile, sizeof ( szFile ) -1 );
	format( szFile, sizeof ( szFile ) -1,"%s/%s", szFile, g_szCmdsFile );
	
	
	new iFile = fopen( szFile, "rt" );
	
	if( !iFile )
		return;
	
	new szData[ 128 ];
	
	while( !feof( iFile ) ) 
	{
		fgets( iFile, szData, sizeof ( szData ) -1 );
		
		if( !szData[ 0 ] || szData[ 0 ] == ';'
			|| ( szData[ 0 ] == '/' && szData[ 1 ] == '/' ) ) 
			continue;
		
		// is here parse needed ?
		parse( szData, szData, sizeof ( szData ) - 1 );
		register_clcmd( szData, "Reset", -1 );
		
	}
		
	fclose( iFile );
	
	
}

public plugin_init( )
{
	register_plugin( PLUGIN, VERSION, "Askhanar" );
	
	gCvarLeetWB = register_cvar( "kz_leet_wb", "1200" );
	gCvarProWB = register_cvar( "kz_pro_wb", "700" );
	gCvarGoodWB = register_cvar( "kz_good_wb", "350" );
	gCvarMinWB = register_cvar( "kz_min_wb", "200" );
	gCvarMaxFPS = register_cvar( "kz_wb_maxfps", "101" );
	gCvarTagWB = register_cvar( "kz_wb_prefix", "| WB Stats:" );
	
	register_clcmd( "say /wbtop", "ClCmdSayWBTop" );
	
	register_clcmd( "say /wbstats", "WbStatsMenu" );
	register_clcmd( "say_team /wbstats", "WbStatsMenu" );
	
	
	register_forward( FM_ClientUserInfoChanged, "fwd_ClientUserInfoChangedPre", true );
	register_forward( FM_PlayerPreThink, "fwd_PlayerPreThinkPre", true );
	
	RegisterHam( Ham_Spawn, "player", "ham_PlayerSpawnPre", true );
	RegisterHam( Ham_Touch, "player", "ham_TouchPlayerPre", true );
	
	SyncHudMessage = CreateHudSyncObj( );
	
	ReadWallBugTop( );
	ReadAndRegisterResetlist( );

}

public ClCmdSayWBTop( id )
{	
	static szBuffer[2368], szName[128], iLen, i;
	
	iLen = formatex( szBuffer, 2367, "<body bgcolor=#FFFFFF><br><center><img src=^"%s^"</center>", g_szBanner );
	iLen += format( szBuffer[ iLen ], 2367 - iLen, "<br><br><br><table width=50%% cellpadding=2 cellspacing=0 border=0> <tr align=center bgcolor=#52697B>" );
	iLen += format( szBuffer[ iLen ], 2367 - iLen, "<th width=8%% > # <th width=21%%> Name <th width=21%%>Distance");
	
	for( i = INFO_ZERO; i < INFO_TOPNUM; i++ )
	{		
		if( g_iTopDistances[ i ] == INFO_ZERO )
		{
			iLen += format( szBuffer[ iLen ], 2367 - iLen, "<tr align=center%s> <td> %i <td> %s <td> %s", ( ( i%2 ) == 0 ) ? "" : " bgcolor=#A4BED6", ( i + 1), " ", " " );
			//i = INFO_TOPNUM;
		}
		else
		{
			szName = g_szTopNames[ i ];
			while( containi( szName , "<") != -1 )
				replace( szName , sizeof( szName  ) -1, "<", "&lt;" );
			while( containi( szName, ">") != -1 )
				replace( szName , sizeof( szName  ) -1, ">", "&gt;" );
				
			iLen += format( szBuffer[ iLen ], 2367 - iLen, "<tr align=center%s><td> %i <td> %s <td> %i",((i%2)==0) ? "" : " bgcolor=#A4BED6",
				( i + 1 ), g_szTopNames[ i ], g_iTopDistances[ i ] );
		}
	}
	
	iLen += format( szBuffer[ iLen ], 2367 - iLen, "</table></body>" );
	show_motd( id, szBuffer, "WallBug Top" );
}

public client_putinserver( id )
{
	if( is_user_bot( id ) || is_user_hltv( id ) )
		return;
		
	get_user_name( id, g_szName[ id ], 31 );
	get_user_authid( id, g_szAuthId[ id ], 34 );
	
	g_bUserHasWbStats[ id ] = true;
	g_bUserHasWbSounds[ id ] = true;
	g_bUserHasWbMessages[ id ] = true;
	
}

public Reset( id )
{
	g_bReset[ id ] = true;
	
	remove_task( id + TASK_RESET );
	set_task( 0.7, "UnReset", id + TASK_RESET );
		
	
}

public UnReset( id )
{
	id -= TASK_RESET;
	if( !is_user_connected( id ) )
		return;
		
	g_bReset[ id ] = false;
	
}

Clear( id )
{
	for( new i = 0; i < 3; i++ )
	{
		g_fFallStart[ id ][ i ] = 0.0;
		g_fFallEnd[ id ][ i ] = 0.0;
	}
	
	g_bUserMadeWallBug[ id ] = false;
	g_bUserIsFalling[ id ] = false;
	g_bUserIsTouchingWall[ id ] = false;
	
}
	
public fwd_ClientUserInfoChangedPre(  id,  InfoKey  )
{
	if( !is_user_connected( id ) )
		return;
	
	engfunc( EngFunc_InfoKeyValue, InfoKey, "name", g_szName[ id ], 31 );
}

public fwd_PlayerPreThinkPre( id )
{
	
	if( !is_user_alive( id ) )
		return FMRES_IGNORED;
			
	// --| FPS function directly token from kz_bugs_stats v0.62 by Newbie.
	g_fGameTime[ id ] = get_gametime( );
	
	if( g_iFPS[ id ] >= g_fGameTime[ id ] )
		g_iFrames[ id ] += 1;
	
	else
	{
		g_iFPS[ id ] += 1;
		g_iCurrentFPS[ id ] = g_iFrames[ id ];
		g_iFrames[ id ] = 0;
	}
	//--| FPS funtion.
		
	static iFlags;
	iFlags = pev( id, pev_flags );
	
	if( iFlags & FL_INWATER && pev( id, pev_waterlevel ) >= 2
		|| pev( id, pev_movetype ) == MOVETYPE_FLY || !g_bUserHasWbStats[ id ] )
		return FMRES_IGNORED;
		
		
	if( iFlags & FL_ONGROUND && (g_bUserIsFalling[ id ]|g_bUserIsTouchingWall[ id ]|g_bUserMadeWallBug[ id ])  )
	{
		g_bUserIsFalling[ id ] = false;
		g_bUserIsTouchingWall[ id ] = false;
		g_bUserMadeWallBug[ id ] = false;
			
		return FMRES_IGNORED;	
	}
	
	
	if( !( iFlags & FL_ONGROUND ) && g_bUserIsFalling[ id ]
		&& g_bUserIsTouchingWall[ id ] && !g_bUserMadeWallBug[ id ] )
	{
		
		static Float:fVelocity[ 3 ];
		pev( id, pev_velocity, fVelocity );
		
		if( fVelocity[ 2 ] != 0 )
			fVelocity[ 2 ] -= fVelocity[ 2 ];
			
		static iVelocity;
		iVelocity = floatround( vector_length( fVelocity ), floatround_floor );
		
		pev( id, pev_velocity, fVelocity );
		static iSpeed;
		iSpeed = floatround( vector_length( fVelocity ), floatround_floor );
		
		if( iVelocity == 0 && iSpeed <= 4 )
		{
			pev( id, pev_origin, g_fFallEnd[ id ] );
			if( is_in_duck( id ) ) g_fFallStart[ id ][ 2 ] -= 18;
			new iDistance = floatround( ( g_fFallStart[ id ][ 2 ] - g_fFallEnd[ id ][ 2 ] ), floatround_floor );
			
			if( iDistance > get_pcvar_num( gCvarMinWB ) )
			{
				if( g_bReset[ id ] )
				{
					client_cmd( id, "spk fvox/warning.wav" );
					set_hudmessage( 236, 65, 56, -1.0, 0.75, 0, 0.0, 5.0, 0.1, 0.1, -1 );
					ShowSyncHudMsg( id, SyncHudMessage, "Fall Distance: %i^nWell done!^n^nSorry, this stats won't show because you used^nhook/grab/cp or tp command before it", iDistance );
					
					
					if( !task_exists( id + TASK_RESET ) )
						set_task( 0.7, "UnReset", id + TASK_RESET );
					
					Clear( id );
					return FMRES_IGNORED;
				}


				static iMaxFps;
				iMaxFps = get_pcvar_num( gCvarMaxFPS );
				
				if( iMaxFps <= 0 || g_iCurrentFPS[ id ] <= iMaxFps )
				{
					set_hudmessage( 0, 255, 0, -1.0, 0.75, 0, 0.0, 5.0, 0.1, 0.1, -1 );
					ShowSyncHudMsg( id, SyncHudMessage, "Fall Distance: %i^nWell done!", iDistance );
					
					PrintWallBug( id, iDistance );
					CheckAndUpdateWBTop( id, iDistance );
				}
				else if( g_iCurrentFPS[ id ] > iMaxFps )
				{
					client_cmd( id, "spk fvox/warning.wav" );
					set_hudmessage( 236, 65, 56, -1.0, 0.75, 0, 0.0, 5.0, 0.1, 0.1, -1 );
					ShowSyncHudMsg( id, SyncHudMessage, "Fall Distance: %i^nWell done!^n^nSorry, this stats won't show because of your high FPS ( %i ) !^nMax allowed FPS is %i !", iDistance, g_iCurrentFPS[ id ], iMaxFps );
					//PrintWallBug( id, iDistance );
				}
			}
			
			g_bUserMadeWallBug[ id ] = true;
			
		}
		
		
	}
	
	if( !( iFlags & FL_ONGROUND )
		&& !(iFlags & FL_INWATER ) && !g_bUserIsFalling[ id ] )
	{
		
		g_bUserIsFalling[ id ] = true;
		pev( id, pev_origin, g_fFallStart[ id ] );
		if( is_in_duck( id ) )	g_fFallStart[ id ][ 2 ] += 18;
	}
	
	return FMRES_IGNORED;
}

public ham_PlayerSpawnPre(  id  )
{
	
	if( !is_user_alive( id ) )
		return;
	
	g_bUserIsFalling[ id ] = false;
	g_bUserIsTouchingWall[ id ] = false;
	g_bUserMadeWallBug[ id ] = false;
	
	for( new i = 0; i < 3; i++ )
	{
		g_fFallStart[ id ][ i ] = 0.0;
		g_fFallEnd[ id ][ i ] = 0.0;
	}
	
	g_bReset[ id ] = true;
	if( !task_exists( id + TASK_RESET ) )
		set_task( 0.5, "UnReset", id + TASK_RESET );
		
	
	
}

public ham_TouchPlayerPre( id, iEnt )
{
	if ( is_user_alive( id ) && !g_bUserIsTouchingWall[ id ]
		&& !g_bUserMadeWallBug[ id ] && g_bUserIsFalling[id] )
	{
		
		static Float:fVelocity[ 3 ];
		pev( id, pev_velocity, fVelocity );
		
		if( !( pev( id, pev_flags) & FL_ONGROUND )
			&& floatround( vector_length( fVelocity ), floatround_floor ) > 555 )
			g_bUserIsTouchingWall[ id ] = true;
		
	}
}

PrintWallBug( id, const iDistance )
{
	
	new iPlayers[ 32 ], iPlayersNum;
	get_players( iPlayers, iPlayersNum, "ch" );
	
	if( !iPlayersNum )
		return;
	
	new szTag[ 32 ];
	get_pcvar_string( gCvarTagWB, szTag, sizeof ( szTag ) -1 );
	
	if( iDistance >= get_pcvar_num( gCvarLeetWB ) )
	{
		
		for( new i = 0; i < iPlayersNum ; i++ )
		{
			if( g_bUserHasWbMessages[ iPlayers[ i ] ] )
				ColorChat( iPlayers[ i ], RED, "%s %s had done %i units Wall Bug !", szTag, g_szName[ id ], iDistance );
		
			if( g_bUserHasWbSounds[ iPlayers[ i ] ] )
			{
		
				if( id == iPlayers[ i ] )	client_cmd( iPlayers[ i ], "speak misc/mod_wickedsick" );
				else				client_cmd( iPlayers[ i ], "speak misc/mod_godlike" );
			}
		}
		
	}
	
	else if( iDistance >= get_pcvar_num( gCvarProWB ) )
	{
		for( new i = 0; i < iPlayersNum ; i++ )
		{
			if( g_bUserHasWbMessages[ iPlayers[ i ] ] )
				ColorChat( iPlayers[ i ], GREEN, "%s %s had done %i units Wall Bug !", szTag, g_szName[ id ], iDistance );
		}
		
		if( g_bUserHasWbSounds[ id ] )
			client_cmd( id, "speak misc/perfect" );
	}
	
	else if( iDistance >= get_pcvar_num( gCvarGoodWB ) )
	{
		
		for( new i = 0; i < iPlayersNum ; i++ )
		{
			if( g_bUserHasWbMessages[ iPlayers[ i ] ] )
				ColorChat( iPlayers[ i ], GREY,	"%s %s had done %i units Wall Bug !", szTag, g_szName[ id ], iDistance );
		}
		
		if( g_bUserHasWbSounds[ id ] )
			client_cmd( id, "speak misc/impressive" );
	}
	
}

public WbStatsMenu( id )
{
		
	new  menu  =  menu_create(  "\rWallBug Stats", "WbStatsMenuHandler");
	
	new szStats[ 64 ], szSounds[ 64 ], szMessages[ 64 ];
	
	formatex(  szStats,  sizeof ( szStats ) -1, "\wWallBug Stats \r- %s", g_bUserHasWbStats[ id ] ? "\yON" : "\dOFF"  );
	formatex(  szSounds,  sizeof ( szSounds ) -1, "\wWallBug Sounds \r- %s", g_bUserHasWbSounds[ id ] ? "\yON" : "\dOFF"  );
	formatex(  szMessages,  sizeof ( szMessages ) -1, "\wWallBug Messages \r- %s", g_bUserHasWbMessages[ id ] ? "\yON" : "\dOFF"  );

	menu_additem( menu, "\yShow Top^n", "1", 0 );
	menu_additem( menu, szStats, "2", 0 );
	menu_additem( menu, szSounds, "3", 0 );
	menu_additem( menu, szMessages, "4", 0 );
	
	
	menu_display( id, menu );
	
	
}

public WbStatsMenuHandler( id, menu, item)
{
	if( item == MENU_EXIT )
	{
		menu_destroy( menu );
		return 1;
	}
	
	static _access, info[ 4 ], callback;
	menu_item_getinfo( menu, item, _access, info, sizeof ( info ) -1, _, _, callback );
	menu_destroy( menu );
	
	new iKey = str_to_num( info );
	switch( iKey )
	{
		case 1: ClCmdSayWBTop( id );
		case 2:
		{
			g_bUserHasWbStats[ id ] = !g_bUserHasWbStats[ id ];
			WbStatsMenu( id );
		}
		case 3:
		{
			g_bUserHasWbSounds[ id ] = !g_bUserHasWbSounds[ id ];
			WbStatsMenu( id );
		}
		case 4:
		{
			g_bUserHasWbMessages[ id ] = !g_bUserHasWbMessages[ id ];
			WbStatsMenu( id );
		}
	}
	
	return 0;
}
	
public CheckAndUpdateWBTop( id, const iDistance )
{	
	
	for( new i = INFO_ZERO; i < INFO_TOPNUM; i++ )
	{
		if( iDistance > g_iTopDistances[ i ] )
		{
			new pos = i;
			while( !equal(g_szTopAuthIds[ pos ], g_szAuthId[ id ] ) && pos < INFO_TOPNUM )
			{
				pos++;
			}
			
			for (new j = pos; j > i; j-- )
			{
				formatex( g_szTopNames[ j ], 31, g_szTopNames[j - 1] );
				formatex( g_szTopAuthIds[ j ], 34, g_szTopAuthIds[ j - 1 ] );
				g_iTopDistances[ j ] = g_iTopDistances[ j - 1 ];
				
			}
			
			formatex( g_szTopNames[ i ], sizeof ( g_szTopNames ) -1, g_szName[ id ] );
			formatex( g_szTopAuthIds[ i ],  sizeof ( g_szTopAuthIds ) -1, g_szAuthId[ id ] );
			g_iTopDistances[ i ] = iDistance;
			
			new szTag[ 32 ];
			get_pcvar_string( gCvarTagWB, szTag, sizeof ( szTag ) -1 );
			ColorChat( 0, RED,"^x04%s^x03 %s^x01 is now^x04 %i^x01 in WB Top with^x03 %i^x01 units! ", szTag, g_szName[ id ], ( i + 1 ), iDistance );
			
			/*PlayTopSound( i );	*/
			SaveWallBugTop( );
			break;
		}
		
		else if( equal( g_szTopAuthIds[ i ], g_szAuthId[ id ]) )
			break;	
	}
}

/*
PlayTopSound( const i )
{
	if( i + 1 == 1 )
		client_cmd( 0, "spk doop");
	else if( i + 1 == 2 )
		client_cmd( 0, "spk woop" );
	else if( i + 1 == 3 )
		client_cmd( 0, "spk buttons/bell1" );
	else
		client_cmd( 0, "spk fvox/bell");
}
*/

public ReadWallBugTop( )
{
	static szTopPath[ 128 ];
	if( !szTopPath[ 0 ] )
	{
		get_localinfo( "amxx_datadir", szTopPath, sizeof ( szTopPath ) -1 );
		formatex( szTopPath, sizeof ( szTopPath ) -1, "%s/%s", szTopPath, g_szWBTopFile );
	}
	
	new iFile = fopen( szTopPath, "rt" );
	new szBuffer[ 128 ], i = INFO_ZERO;
	
	while( !feof( iFile ) && i < INFO_TOPNUM + 1 )
	{
		fgets( iFile, szBuffer, sizeof ( szBuffer ) -1 );
		
		new szDistance[ 10 ];
		
		parse( szBuffer, g_szTopNames[ i ], sizeof ( g_szTopNames[ ] ) -1,
			g_szTopAuthIds[ i ], sizeof ( g_szTopAuthIds[ ] ) -1, szDistance, 9 );
			
		g_iTopDistances[ i ] = str_to_num( szDistance );
		
		i++;
	}
	
	fclose( iFile );
}

public SaveWallBugTop( )
{
	static szTopPath[ 128 ];
	if( !szTopPath[ 0 ] )
	{
		get_localinfo( "amxx_datadir", szTopPath, sizeof ( szTopPath ) -1 );
		formatex( szTopPath, sizeof ( szTopPath ) -1, "%s/%s", szTopPath, g_szWBTopFile );
	}
	
	if( file_exists( szTopPath ) ) 
		delete_file( szTopPath );
	
	new szBuffer[ 128 ];
	new iFile = fopen( szTopPath, "at" );
	
	for( new i = INFO_ZERO; i < INFO_TOPNUM; i++ )
	{
		formatex( szBuffer, sizeof ( szBuffer ) -1, "^"%s^" ^"%s^" ^"%i^"^n",
			g_szTopNames[ i ], g_szTopAuthIds[ i ], g_iTopDistances[ i ] );
		fputs( iFile, szBuffer );
	}
	
	fclose( iFile );
}

stock bool:is_in_duck( iEnt )
{
	if( !pev_valid( iEnt ) ) return false;

	static Float:fAbsmin[ 3 ], Float:fAbsmax[ 3 ];

	pev( iEnt, pev_absmin, fAbsmin );
	pev( iEnt, pev_absmax, fAbsmax );
	fAbsmin[ 2 ] += 64.0;
	
	if( fAbsmin[ 2 ] < fAbsmax[ 2 ] )
		return false;
		
	return true;
}

public plugin_end( )	SaveWallBugTop( );
